import streamlit as st
from modules.data_loader import DataLoader
from modules.analyzer import DataAnalyzer
from modules.visualizer import DataVisualizer

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Mobilidade Urbana - Natal/RN",       
    page_icon="üöå",                     
    layout="wide",                      
    initial_sidebar_state="collapsed",   
)

# Constru√ß√£o da P√°gina
st.title('Mobilidade Urbana - Natal/RN')
st.divider()
st.markdown('## Bilhetagem Eletr√¥nica')
st.markdown("""
            A bilhetagem eletr√¥nica √© um sistema que permite a cobran√ßa eletr√¥nica de passagens em transportes p√∫blicos.
            Atrav√©s da bilhetagem eletr√¥nica √© poss√≠vel obter informa√ß√µes sobre a quantidade de passageiros transportados,
            valor arrecadado, entre outras informa√ß√µes.
            <br>
            Os dados utilizados para constru√ß√£o desta an√°lise foram obtidos atrav√©s do portal de <a href='http://dados.natal.br/dataset'>dados abertos</a> 
            da Prefeitura do Natal e abrangem de 2018 a 2022.
            <br><br>
        """, unsafe_allow_html=True)
st.divider()

st.markdown("""
            <h5>Objetivo Principal:</h5> 
            <p>Entender padr√µes e tend√™ncias de mobilidade urbana em Natal/RN.</p>
            <br>
            <h5>Objetivos Secund√°rios:</h5>
            <ul>
                <li>Investigar a estrutura, caracter√≠sticas e qualidade dos dados;</li>
                <li>Identificar padr√µes, tend√™ncias, outliers e rela√ß√µes entre vari√°veis;</li>
                <li>Gerar informa√ß√µes relevantes e aplic√°veis a partir da base de dados;</li>
                <li>Aplicar ferramentas e m√©todos aprendidos na disciplina para manipula√ß√£o e visualiza√ß√£o de dados.</li>
            </ul>
            <br>
            """, unsafe_allow_html=True)
st.divider()

# An√°lise dos dados
st.markdown('### An√°lise inicial dos dados')
st.markdown("""
                <p>
                    Inicicialmente buscamos padronizar as colunas dos dados, que foram recebidos em 5 arquivos csv distintos e 
                    com padr√µes diferentes.
                    <br>
                    Ap√≥s a padroniza√ß√£o, renomeamos alguns itens que tinham acentos que fugiam do padr√£o utilizado para exibi√ß√£o.
                    <br>
                    Por fim, criamos e realizamos a convers√£o da coluna 'Mes_Ano' para o formato de data, para facilitar a an√°lise temporal.
                    E concatenamos todos os dataframes em um √∫nico dataframe para facilitar a an√°lise no geral.
                </p>
            """, unsafe_allow_html=True)
st.divider()

# Verficando os dados nulos e estat√≠sticas descritivas
col1, col2 = st.columns([0.5, 1.5])
with col1: 
    st.markdown("""
                <p>
                    Utilizando o m√©todo <code>.isnull()</code> e <code>.sum()</code> 
                    conseguimos identificar a quantidade de valores nulos em cada coluna.
                </p>
                """, unsafe_allow_html=True)
    st.write(df_bilhetagem_geral.isnull().sum()) # Verifica√ß√£o de valores nulos
    
with col2: 
    st.markdown("""
                <p>
                    Utilizando o m√©todo <code>.describe()</code> para obter as estatisticas sobre as colunas.
                    Com isso, podemos ver que: 
                    <ul>
                        <li>o dataframe cont√©m 4.734 linhas em 14 colunas n√∫mericas. Al√©m da m√©dia e desvio padr√£o dessas colunas.</li>
                        <li>o valor m√≠nimo de viagens √© 1 e o m√°ximo √© 6.080.</li>
                        <li>Al√©m disso, os valores minimos e maximos por categoria de passagem</li>
                        <li>Por fim, os quartis de valor!</li>
                    </ul>
                </p>
            """, unsafe_allow_html=True)
    st.markdown('')
    df_to_describe = df_bilhetagem_geral.drop(columns=['Ano', 'Mes', 'Linha'])
    st.write(df_to_describe.describe()) # Estat√≠sticas descritivas  
st.divider()  

# An√°lise de correla√ß√£o e outliers
col1, col2 = st.columns([1, 1]) 
# Correl√ß√£o de vari√°veis
with col1: 
    st.markdown("""
                <h5>Correla√ß√£o de vari√°veis</h5>
                <p>
                    Utilizando o m√©todo <code>.corr()</code> com as colunas que possuem valores inteiros e floats
                    conseguimos criar um heatmap com os valores de correla√ß√£o entre as colunas.
                    <br>
                    <ul>
                        <li>Sendo 1 uma correla√ß√£o perfeita, quando uma vari√°vel aumenta a outra tamb√©m aumenta;</li>
                        <li>0 uma correla√ß√£o nula, quando uma vari√°vel aumenta a outra n√£o √© afetada;</li>
                        <li>-1 uma correla√ß√£o negativa, quando uma vari√°vel aumenta a outra diminui.</li>
                    </ul>
                </p>
                """, unsafe_allow_html=True)
    plt.figure(figsize=(10, 7.5))
    numeric_cols = df_bilhetagem_geral.select_dtypes(include=['float64', 'int64'])
    numeric_cols = numeric_cols.drop(columns=['Ano', 'Mes', 'Linha'])
    matriz_correlacao = numeric_cols.corr()
    heatmap = sns.heatmap(matriz_correlacao, annot=True, cmap='coolwarm', fmt='.2f')
    plt.title("Heatmap de Correla√ß√£o", fontsize=18)
    st.pyplot(plt.gcf())  

# Outliers de viagens     
with col2:
    st.markdown("""
                <h5>Outliers de viagens</h5>
                <p>
                    Afim de observar a presen√ßa de outliers na coluna 'Qtd_Viagens' optamos por fazer um boxplot.
                    <br>
                    <ul>
                        <li>A partir dele observamos que o valor limite inferior de viagens √© o 0 e o limite superior √© na casa dos 4.500.</li>
                        <li>Tamb√©m podemos ver que o primeiro quartil est√° na casa das 500 viagens, segundo quartil (mediana) est√° na casa dos 1.200 ~ viagens e 
                    o terceiro quartil por volta das 2.200 viagens.</li>
                        <li>Tamb√©m podemos observar a presen√ßa de outliers, que s√£o os pontos fora do limite superior e inferior. Numa quantidade significativa e 
                    que devem ser descartados ou avaliados a partir de datas espec√≠ficas para escolha de manter ou n√£o na an√°lise.</li>
                    </ul>
                </p>
                """, unsafe_allow_html=True)
    plt.figure(figsize=(4, 2))
    boxplot = sns.boxplot(data=df_bilhetagem_geral, x='Qtd_Viagens')
    plt.title("Distribui√ß√£o de Qtd_Viagens", fontsize=12)
    plt.xlabel("Quantidade de Viagens", fontsize=8)
    plt.ylabel("Densidade", fontsize=8)
    st.pyplot(plt.gcf())
    
st.divider()

# An√°lise Temporal
st.markdown('### An√°lise temporal de uso')
st.markdown("""
            <p>
                Para a an√°lise nesse caso extraimos os dados referentes a quantidade de viagens totais realizadas (por todas as linhas), somando-os e 
                agrupando pela coluna 'Mes_Ano' criada durante a limpeza e raspagem de dados.
                <br>
                Com isso, optamos por fazer um gr√°fico de linhas que expressaria da melhor forma a varia√ß√£o das viagens durante o tempo.
                <br>
            </p>
            """, unsafe_allow_html=True)

col1, col2 = st.columns([1.1, 0.9])
with col1: plot_line_chart(df_bilhetagem_geral)
st.divider()

# An√°lise Comparativa
st.markdown('### An√°lise dos tipos de bilhetagem')
st.markdown("""
            <p>
                Para a an√°lise queriamos analisar os tipos de bilhetagem em rela√ß√£o a quantidade de viagens realizadas no total em todo o per√≠odo, 
                afim de descobrir os tipos de clientes das linhas.
                <br>
                Para tal optamos por um gr√°fico de barras comparando os tipos de bilhetagem armazenadas no dataframe.
                <br>
            </p>
            """, unsafe_allow_html=True)

col1, col2 = st.columns([1.1, 0.9])
with col1: plot_bilhetagem_comparativa(df_bilhetagem_geral)
st.divider()

st.markdown('### An√°lise de volumes de viagem por linha')
st.markdown("""
            <p>
                Nesse caso, queriamos verificar o volume de viagens por linha, detectando o que acreditamos ser a maior demanda.
                <br>
                Filtramos tamb√©m ordenando pelas top 10 linhas com maior quantidade de viagens, presumindo que essas s√£o as com maiores demandas perante os usu√°rios!
                <br>
                Com isso, optamos por fazer um gr√°fico de barras, mostrando os maiores quantidade de viagens por linha.
                <br>
            </p>
            """, unsafe_allow_html=True)

col1, col2 = st.columns([1.1, 0.9])
with col1: plot_top_linhas(df_bilhetagem_geral)
st.divider()

st.markdown('### An√°lise de volume de viagens por empresa')
st.markdown("""
            <p>
                Nesse caso optamos por fazer a an√°lise de dados focada na quantidade de viagens por empresa apurando assim qual empresa teria maior impacto na mobilidade urbana.
                <br>
                Mantemos a ideia de um gr√°fico de barras que expressaria da melhor forma a varia√ß√£o das viagens por empresa.
                <br>
            </p>
            """, unsafe_allow_html=True)

col1, col2 = st.columns([1.1, 0.9])
with col1: plot_top_empresas(df_bilhetagem_geral)
