import streamlit as st
import pandas as pd
import numpy as np
from services.graphs import plot_line_chart, plot_bilhetagem_comparativa, plot_top_linhas, plot_top_empresas, plot_comparacao_empresas, plot_sazonalidade_por_linha

# Carregamento de dados
df = {}
ano_df = 2018

# La√ßo para carregar os dados de 2018, 2019 e 2020 que tem as mesmas caracter√≠sticas
for i in range(3):
    df[ano_df] = pd.read_csv(f"data/01-dados-be-{ano_df}-analitico.csv", encoding='latin1', sep=';')
    ano_df += 1
# Carregamento dos dados de 2021 e 2022 que tem caracter√≠sticas diferentes dos demais
df[2021] = pd.read_csv("data/01-dados-be-2021-analitico.csv")
df[2022] = pd.read_csv("data/01-dados-be-2022-analitico.csv", encoding='latin1', sep=',')

# Renomea√ß√£o de colunas para padroniza√ß√£o
df[2018].rename(columns={'M√™s': 'Mes'}, inplace=True)
df[2019].rename(columns={'M√™s': 'Mes'}, inplace=True)
df[2021].rename(columns={'M√™s': 'Mes'}, inplace=True)

ano_df = 2018

# L√£o para adicionar a coluna de ano para identifica√ß√£o quando concatenar os dataframes
for i in range(len(df)):
    df[ano_df]['Ano'] = ano_df
    ano_df += 1

# Concatena√ß√£o dos dataframes
dfs_bilhetagem = [df[2018], df[2019], df[2020], df[2021], df[2022]]
df_bilhetagem_geral = pd.concat(dfs_bilhetagem, ignore_index=True)

# Manipula√ß√£o de dados
df_bilhetagem_geral['Empresa'] = df_bilhetagem_geral['Empresa'].replace('CONCEI√á√ÉO', 'CONCEICAO') # Corre√ß√£o de acentua√ß√£o
df_bilhetagem_geral['Mes_Ano'] = df_bilhetagem_geral['Mes'].astype(str) + '/' + df_bilhetagem_geral['Ano'].astype(str) # Cria√ß√£o de coluna Mes_Ano

# Viagens por m√™s/ano
viagens_por_mes = df_bilhetagem_geral.groupby('Mes_Ano')['Qtd_Viagens'].sum().reset_index()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Mobilidade Urbana - Natal/RN",       
    page_icon="üöå",                     
    layout="wide",                      
    initial_sidebar_state="collapsed",   
)

# Constru√ß√£o da P√°gina
st.title('Mobilidade Urbana - Natal/RN')
st.divider()
st.markdown('## Bilhetagem Eletr√¥nica')
st.markdown("""
            A bilhetagem eletr√¥nica √© um sistema que permite a cobran√ßa eletr√¥nica de passagens em transportes p√∫blicos.
            Atrav√©s da bilhetagem eletr√¥nica √© poss√≠vel obter informa√ß√µes sobre a quantidade de passageiros transportados,
            valor arrecadado, entre outras informa√ß√µes.
            <br>
            Os dados utilizados para constru√ß√£o desta an√°lise foram obtidos atrav√©s do portal de <a href='http://dados.natal.br/dataset'>dados abertos</a> 
            da Prefeitura do Natal.
            <br><br>
        """, unsafe_allow_html=True)
st.divider()

st.markdown("""
            <h5>Objetivo Principal:</h5> Entender padr√µes e tend√™ncias de mobilidade urbana em Natal/RN.
            <br>
            <h5>Objetivos Secund√°rios:</h5>
            <ul>
                <li>Investigar a estrutura, caracter√≠sticas e qualidade dos dados;</li>
                <li>Identificar padr√µes, tend√™ncias, outliers e rela√ß√µes entre vari√°veis;</li>
                <li>Gerar informa√ß√µes relevantes e aplic√°veis a partir da base de dados;</li>
                <li>Aplicar ferramentas e m√©todos aprendidos na disciplina para manipula√ß√£o e visualiza√ß√£o de dados.</li>
            </ul>
            <br>
            """, unsafe_allow_html=True)
st.divider()

# An√°lise dos dados
st.markdown('### An√°lise inicial dos dados')
st.markdown("""
                <p>
                    Inicicialmente buscamos padronizar as colunas dos dados, que foram recebidos em 5 arquivos csv distintos e 
                    com padr√µes diferentes.
                    <br>
                    Ap√≥s a padroniza√ß√£o, renomeamos alguns itens que tinham acentos que fugiam do padr√£o utilizado para exibi√ß√£o.
                    <br>
                    Por fim, criamos e realizamos a convers√£o da coluna 'Mes_Ano' para o formato de data, para facilitar a an√°lise temporal.
                    E concatenamos todos os dataframes em um √∫nico dataframe para facilitar a an√°lise no geral.
                </p>
            """, unsafe_allow_html=True)
st.divider()

col1, col2 = st.columns([0.5, 1.5])
with col1: 
    st.markdown("""
                <p>
                    Utilizando o m√©todo <code>.isnull()</code> e <code>.sum()</code> 
                    conseguimos identificar a quantidade de valores nulos em cada coluna.
                </p>
                """, unsafe_allow_html=True)
    st.write(df_bilhetagem_geral.isnull().sum())
with col2: 
    st.markdown("""
                <p>
                    Utilizando o m√©todo <code>.describe()</code> para obter as estatisticas sobre as colunas.
                    Com isso, podemos ver que: 
                    <ul>
                        <li>o dataframe cont√©m 4.734 linhas em 14 colunas n√∫mericas. Al√©m da m√©dia e desvio padr√£o dessas colunas.</li>
                        <li>o valor m√≠nimo de viagens √© 1 e o m√°ximo √© 6.080.</li>
                        <li>Al√©m disso, os valores minimos e maximos por categoria de passagem</li>
                        <li>Por fim, os quartis de valor!</li>
                    </ul>
                </p>
            """, unsafe_allow_html=True)
    st.markdown('')
    st.write(df_bilhetagem_geral.describe())   
st.divider()

# An√°lise Temporal
st.markdown('### An√°lise temporal de uso')
st.markdown("""
            <p>
                Para a an√°lise nesse caso extraimos os dados referentes a quantidade de viagens totais realizadas (por todas as linhas), somando-os e 
                agrupando pela coluna 'Mes_Ano' criada durante a limpeza e raspagem de dados.
                <br>
                Com isso, optamos por fazer um gr√°fico de linhas que expressaria da melhor forma a varia√ß√£o das viagens durante o tempo.
            </p>
            """, unsafe_allow_html=True)

col1, col2 = st.columns([1.1, 0.9])
with col1:
    plot_line_chart(df_bilhetagem_geral)

# An√°lise Comparativa
st.markdown('### An√°lise dos tipos de bilhetagem')
st.markdown("""
            <p>
                Para a an√°lise queriamos analisar os tipos de bilhetagem em rela√ß√£o a quantidade de viagens realizadas no total em todo o per√≠odo, 
                afim de descobrir os tipos de clientes das linhas.
                <br>
                Para tal optamos por um gr√°fico de barras comparando os tipos de bilhetagem armazenadas no dataframe.
            </p>
            """, unsafe_allow_html=True)

col1, col2 = st.columns([1.1, 0.9])
with col1:
    plot_bilhetagem_comparativa(df_bilhetagem_geral)

st.markdown('### An√°lise de volumes de viagem por linha')
st.markdown("""
            <p>
                Nesse caso, queriamos verificar o volume de viagens por linha, detectando o que acreditamos ser a maior demanda.
                <br>
                Filtramos tamb√©m ordenando pelas top 10 linhas com maior quantidade de viagens, presumindo que essas s√£o as com maiores demandas perante os usu√°rios!
                <br>
                Com isso, optamos por fazer um gr√°fico de barras, mostrando os maiores quantidade de viagens por linha.
            </p>
            """, unsafe_allow_html=True)

col1, col2 = st.columns([1.1, 0.9])
with col1:
    plot_top_linhas(df_bilhetagem_geral)

st.markdown('### An√°lise de volume de viagens por empresa')
st.markdown("""
            <p>
                Nesse caso optamos por fazer a an√°lise de dados focada na quantidade de viagens por empresa apurando assim qual empresa teria maior impacto na mobilidade urbana.
                <br>
                Mantemos a ideia de um gr√°fico de barras que expressaria da melhor forma a varia√ß√£o das viagens por empresa.
            </p>
            """, unsafe_allow_html=True)

col1, col2 = st.columns([1.1, 0.9])
with col1:
    plot_top_empresas(df_bilhetagem_geral)